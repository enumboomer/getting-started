import { recordHook, FlatfileRecord } from "@flatfile/plugin-record-hook";
import { FlatfileEvent, Client } from "@flatfile/listener";
import { contactSheet } from "./sheets/contactSheet";
import { ccSheet } from "./sheets/costCenter";
import api from "@flatfile/api";
import { automap } from "@flatfile/plugin-automap";
import axios from "axios";
import { format, isDate, isFuture, parseISO } from "date-fns";
import { xlsxExtractorPlugin } from '@flatfile/plugin-xlsx-extractor'
import { isContext } from "vm";

export default function flatfileEventListener(listener: Client) {
  listener.on("**", ({ topic }: FlatfileEvent) => {
    console.log(`Received event: ${topic}`);
  });

  //when the "Create new Space" button is clicked in the UI
  listener.filter({ job: "space:configure" }, (configure) => {
    configure.on(
      "job:ready",
      async ({ context: { spaceId, environmentId, jobId } }) => {
        await api.jobs.ack(jobId, {
          info: "Creating space...",
          progress: 10,
        });

        const { data: workbook } = await api.workbooks.create({
          spaceId,
          environmentId,
          name: "All Data",
          labels: ["primary"],
          sheets: [contactSheet, ccSheet],
          actions: [
            {
              operation: "submitAction",
              mode: "foreground",
              label: "Submit",
              type: "string",
              description: "Submit data to webhook.site",
              primary: true,
            },
          ],
        });

        // sets the workbook as the primary to enable the data checklist
        await api.spaces.update(spaceId, {
          environmentId,
          primaryWorkbookId: workbook.id,
        });

        await api.documents.create(spaceId, {
          title: "Getting Started",
          body: `# Welcome
  ### Say hello to your first customer Space in the new Flatfile!
  Let's begin by first getting acquainted with what you're seeing in your Space initially.
  ---`,
        });

        await api.jobs.complete(jobId, {
          outcome: {
            message: "This job is now complete.",
          },
        });
      }
    );
  });

  // listener.use(
  //   automap({
  //     debug: false,
  //     accuracy: "confident",
  //     defaultTargetSheet: "Contacts",
  //     matchFilename: /^test.csv$/g,
  //     onFailure: (event: FlatfileEvent) => {
  //       // send an SMS, an email, post to an endpoint, etc.
  //       console.error(
  //         `Please visit https://spaces.flatfile.com/space/${event.context.spaceId}/files?mode=import to manually import file.`,
  //       );
  //     },
  //   }),
  // );

  //When a record is created or edited
  listener.use(
    recordHook("contacts", (record: FlatfileRecord, event: FlatfileEvent) => {

      record.setMetadata({
        lastEgress: Date.now()
      });

      if (record.get('email')) {
        const email = record.get("email") as string;
        const validEmailAddress = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
        if (!validEmailAddress.test(email)) {
          console.log("Invalid email address");
          record.addError("email", "Must be a valid email address");
        }
      }

      if (record.get('country')) {
        const country = record.get("country") as string;
        const validCountry = /^[A-Z]{2}$/;
        if (!validCountry.test(country)) {
          console.log("Invalid country");
          record.addError("country", "Must be two char country code");
        }
      }

      if (record.get('firstName') && !record.get('lastName')) {
        const fName = record.get('firstName') as string;
        if (fName.includes(" ")) {
          const components = fName.split(" ");
          record.set('firstName', components.shift());
          record.set('lastName', components.join(" "));
          record.addInfo('lastName', 'Automatically generated from full name')
        }
      }

      if (record.get('firstName') && record.get('lastName') && !record.get('fullName')) {
        const fullName = `${record.get('firstName')} ${record.get('lastName')}`
        record.set('fullName', fullName)
        record.addInfo('fullName', 'System generated by combining first and last name.')
      }

      if (!record.get('phone') && !record.get('email')) {
        record.addWarning('phone', 'Please inlclude one of either phone or email')
        record.addWarning('email', 'Please inlclude one of either phone or email')
      }

      if (record.get('date')) {
        //reformat the date to ISO format
        const date = record.get('date') as string
        let thisDate = format(new Date(date), "yyyy-MM-dd");
        //create var that holds the date value of the reformatted date as
        //thisDate is only a string
        let realDate = parseISO(thisDate);
        if (isDate(realDate)) {
          record.set('date', thisDate)
          if (isFuture(realDate)) {
            record.addError('date', 'Date cannot be in the future.')
          }
        } else {
          record.addError('date', 'Please check that the date is formatted YYYY-MM-DD.')
        }
      }

      if (record.get('zipCode') && record.get('country')) {
        const zip = record.get('zipCode') as string
        const country = record.get('country') as string
        if (zip && zip.length < 5 && country === "US") {
          record.set('zipCode', zip.padStart(5, '0'))
          record.addInfo('zipCode', 'Zipcode was padded with zeroes')
        }
      }

      // if (record.get('ccName')) {
      //   const links = record.getLinks('ccName')
      //   const lookupValue = links?.[0]?.['code']
      //   const targetField = 'ccId'
      //   record.set(targetField, lookupValue)
      //   record.addInfo(targetField, 'From linked file')
      // }

      if (record.get('ccId')) {
        const links = record.getLinks('ccId')
        const lookupValue = links?.[0]?.['name']
        const targetField = 'ccName'
        record.set(targetField, lookupValue)
        record.addInfo(targetField, 'From linked file')
      }

      return record;
    })
  );

  //when the user clicks submit in review
  listener.filter({ job: "workbook:submitAction" }, (configure) => {
    configure.on(
      "job:ready",
      async ({ context: { jobId, workbookId }, payload }: FlatfileEvent) => {
        const { data: sheets } = await api.sheets.list({ workbookId });

        const records: { [name: string]: any } = {};
        for (const [index, element] of sheets.entries()) {
          records[`Sheet[${index}]`] = await api.records.get(element.id);
        }

        try {
          await api.jobs.ack(jobId, {
            info: "Starting job to submit action to webhook.site",
            progress: 10,
          });

          // console.log(JSON.stringify(records, null, 2));

          const webhookReceiver =
            process.env.WEBHOOK_SITE_URL ||
            "https://webhook.site/ac5c7ed6-6f36-48b2-a478-82a60917b45d";

          const response = await axios.post(
            webhookReceiver,
            {
              ...payload,
              method: "axios",
              sheets,
              records,
            },
            {
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (response.status === 200) {
            await api.jobs.complete(jobId, {
              outcome: {
                message:
                  "Data was successfully submitted to webhook.site. Go check it out!",
              },
            });
          } else {
            throw new Error("Failed to submit data to webhook.site");
          }
        } catch (error) {
          console.log(`webhook.site[error]: ${JSON.stringify(error, null, 2)}`);

          await api.jobs.fail(jobId, {
            outcome: {
              message:
                "This job failed probably because it couldn't find the webhook.site URL.",
            },
          });
        }
      }
    );
  });

  listener.use(xlsxExtractorPlugin({ rawNumbers: true }))
}
